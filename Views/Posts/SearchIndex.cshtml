@using Blogly.Services
@using Blogly.Models
@using Blogly.Enums
@using Blogly.ViewModels
@using X.PagedList
@using X.PagedList.Mvc.Core
@using X.PagedList.Web.Common
@using Microsoft.AspNetCore.Identity;

@inject UserManager<BlogUser> userManager
@inject IImageService _imageService
@model IPagedList<Post>

@{
    ViewData["Title"] = "Home Page";
}

<!-- Page content-->
<!-- Nested row for non-featured blog posts-->
<div class="row">
    <!-- Blog post-->
    @foreach (var post in Model)
    {
        //Is the logged in user the Author of this post??
        var isAuthor = false;
        if (User.Identity.IsAuthenticated)
        {
            isAuthor = (post.BlogUserId == userManager.GetUserId(User));
        }

        <div class="col-md-6 mt-2">
            <div class="card mb-4">
                <img class="card-img-top"
                     src="@_imageService.DecodeImage(post.ImageData, post.ContentType)" alt="..." />
                <div class="card-body d-grid gap-1 text-center">
                    <h2 class="card-title h4">Post @post.Title</h2>
                    <p class="card-text">
                        @post.Abstract
                    </p>

                    <a class="btn btn-dark btn-sm mb-2" asp-action="Details" asp-controller="Posts" asp-route-slug="@post.Slug">Read More</a>

                    @if (User.IsInRole(BlogRole.Administrator.ToString()) || isAuthor)
                    {
                        <a class="btn btn-dark" asp-action="Edit" asp-controller="Posts" asp-route-id="@post.Id">Edit Post</a>
                        <a class="btn btn-dark" asp-action="Delete" asp-controller="Posts" asp-route-id="@post.Id">Delete Post</a>

                    }
                </div>
            </div>
        </div>
    }
</div>

<!-- Add paging controls here-->
<div class="row">
    <div class="col h3">
        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
    </div>
</div>
<div class="row">
    <div class="col">
        @Html.PagedListPager(Model, page => Url.Action("BlogPostIndex", new { id = Model.FirstOrDefault().BlogId, page = page}),
        new PagedListRenderOptions
        {
        LiElementClasses = new string[] { "page-item"},
        PageClasses = new string[] { "page-link"}
        })
    </div>
</div>
